-- DIFF BETWEEN PROCEDURE AND FUNCTION


-- PROCEDURE                                                                       FUNCTION
-- FOR LOGICAL OPERATION                                                           ARITHMETIC OPERATION
-- NEED NOT TO RETURN A VALUE                                                      MUST RETURN VALUE
-- PARAMETERS: IN , OUT, IN OUT                                                    IN
-- CANNOT BE USED IN A SELECT QUERY                                                CAN BE USED IN SELECT QUERY


CREATE TABLE CUSTOMERS(
   ID   INT              NOT NULL,
   NAME VARCHAR (20)     NOT NULL,
   AGE  INT              NOT NULL,
	GENDER CHAR(1),
   ADDRESS  CHAR (25) ,
   SALARY   DECIMAL (18, 2),       
   PRIMARY KEY (ID)
);


INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (1, 'Ramesh', 32, 'M','Bangalore', 2000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (2, 'Khilan', 25, 'M','Hyderabad', 6500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (3, 'kaushik', 23, 'M','Bangalore', 2000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (4, 'Chaitali', 25, 'F','Chennai', 6500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (5, 'Hardik', 27, 'M','Hyderabad', 6500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (6, 'Komal', 22, 'F','Bangalore', 6500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (7, 'Rajesh', 22,'M', 'Chennai', 5500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (8, 'Sangavi', 21,'F', 'Hyderabad', 5000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (9, 'Kavin', 22,'M', 'Bangalore', 6500.00 );


SELECT * FROM CUSTOMERS;

INSERT INTO CUSTOMERS (ID,NAME,AGE,GENDER,ADDRESS,SALARY)
VALUES (10, 'Shivani', 12,'F', 'Chennai', 10000.00 );



CREATE OR REPLACE FUNCTION salary_category(sal IN integer)
RETURN VARCHAR2 IS
    category VARCHAR2(100);
BEGIN
    IF sal > 6000 THEN
        category := 'High Paid';
    ELSE
        category := 'less Paid';
    END IF;
    
    RETURN category;
END;
/

SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY ,salary_category(SALARY) AS SALARY_CATEGORY FROM CUSTOMERS; 

--  ROW_NUMBER(), RANK(), DENSE_RANK()

SELECT * FROM CUSTOMERS;

SELECT * FROM CUSTOMERS WHERE SALARY=(SELECT MAX(SALARY) FROM CUSTOMERS);

SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY, ROW_NUMBER() OVER (ORDER BY SALARY DESC)  rnk 
FROM CUSTOMERS; 

SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY, RANK() OVER (ORDER BY SALARY DESC)  rnk 
FROM CUSTOMERS; 

SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY FROM (
SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC)  rnk 
FROM CUSTOMERS) tbl
WHERE tbl.rnk<=3; 


SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY , rnk FROM (
SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY, DENSE_RANK() OVER (PARTITION BY GENDER ORDER BY SALARY DESC)  rnk 
FROM CUSTOMERS ) sal_rnk
WHERE sal_rnk.rnk<=2;

SELECT * FROM CUSTOMERS;

SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY , rnk FROM (
SELECT ID, NAME, AGE, GENDER, ADDRESS, SALARY, DENSE_RANK() OVER (PARTITION BY ADDRESS ORDER BY SALARY DESC)  rnk 
FROM CUSTOMERS  ) sal_rnk
WHERE sal_rnk.rnk = 1;


